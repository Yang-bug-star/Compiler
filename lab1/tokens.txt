(STRUCT, struct)
(ID, Test_struct)
(LBRACE, {)
(INT, int)
(ID, test_int)
(SEMICOLON, ;)
(SHORT, short)
(ID, test_short)
(SEMICOLON, ;)
(LONG, long)
(ID, test_long)
(SEMICOLON, ;)
(LONG, long)
(LONG, long)
(ID, test_long_long)
(SEMICOLON, ;)
(DOUBLE, double)
(ID, test_double)
(SEMICOLON, ;)
(FLOAT, float)
(ID, test_float)
(SEMICOLON, ;)
(CHAR, char)
(ID, test_char)
(SEMICOLON, ;)
(RBRACE, })
(SEMICOLON, ;)
(TYPEDEF, typedef)
(INT, int)
(ID, MYINT)
(SEMICOLON, ;)
(CONST, const)
(INT, int)
(ID, N)
(DIRECTASSIGN, =)
(INT_CONSTANT, 3)
(SEMICOLON, ;)
(ENUM, enum)
(LBRACE, {)
(ID, LEFT)
(COMMA, ,)
(ID, RIGHT)
(RBRACE, })
(SEMICOLON, ;)
(VOID, void)
(ID, set)
(LPARENTHESE, ()
(STRUCT, struct)
(ID, Test_struct)
(STAR, *)
(ID, p)
(COMMA, ,)
(INT, int)
(ID, in_int)
(COMMA, ,)
(SHORT, short)
(ID, in_short)
(COMMA, ,)
(LONG, long)
(ID, in_long)
(COMMA, ,)
(LONG, long)
(LONG, long)
(ID, in_long_long)
(COMMA, ,)
(DOUBLE, double)
(ID, in_double)
(COMMA, ,)
(FLOAT, float)
(ID, in_float)
(COMMA, ,)
(CHAR, char)
(ID, in_char)
(RPARENTHESE, ))
(LBRACE, {)
(ID, p)
(ARROW, ->)
(ID, test_int)
(DIRECTASSIGN, =)
(ID, in_int)
(SEMICOLON, ;)
(ID, p)
(ARROW, ->)
(ID, test_short)
(DIRECTASSIGN, =)
(ID, in_short)
(SEMICOLON, ;)
(ID, p)
(ARROW, ->)
(ID, test_long)
(DIRECTASSIGN, =)
(ID, in_long)
(SEMICOLON, ;)
(ID, p)
(ARROW, ->)
(ID, test_long_long)
(DIRECTASSIGN, =)
(ID, in_long_long)
(SEMICOLON, ;)
(ID, p)
(ARROW, ->)
(ID, test_double)
(DIRECTASSIGN, =)
(ID, in_double)
(SEMICOLON, ;)
(ID, p)
(ARROW, ->)
(ID, test_float)
(DIRECTASSIGN, =)
(ID, in_float)
(SEMICOLON, ;)
(ID, p)
(ARROW, ->)
(ID, test_char)
(DIRECTASSIGN, =)
(ID, in_char)
(SEMICOLON, ;)
(RETURN, return)
(SEMICOLON, ;)
(RBRACE, })
(INT, int)
(ID, main)
(LPARENTHESE, ()
(RPARENTHESE, ))
(LBRACE, {)
(STRUCT, struct)
(ID, Test_struct)
(ID, test)
(SEMICOLON, ;)
(ID, set)
(LPARENTHESE, ()
(ESPERLUETTE, &)
(ID, test)
(COMMA, ,)
(INT_CONSTANT, 1)
(COMMA, ,)
(INT_CONSTANT, 2)
(COMMA, ,)
(FLOAT_CONSTANT, 3e6)
(COMMA, ,)
(FLOAT_CONSTANT, 3e6)
(COMMA, ,)
(FLOAT_CONSTANT, 3.e05)
(COMMA, ,)
(FLOAT_CONSTANT, 3.25e-2)
(COMMA, ,)
(CHARACTER, 'a')
(RPARENTHESE, ))
(SEMICOLON, ;)
(ID, test)
(PERIOD, .)
(ID, test_int)
(ADDASSIGN, +=)
(INT_CONSTANT, 2)
(SEMICOLON, ;)
(ID, test)
(PERIOD, .)
(ID, test_short)
(SUBASSIGN, -=)
(INT_CONSTANT, 1)
(SEMICOLON, ;)
(ID, test)
(PERIOD, .)
(ID, test_long)
(DIVASSIGN, /=)
(INT_CONSTANT, 2)
(SEMICOLON, ;)
(ID, test)
(PERIOD, .)
(ID, test_long_long)
(RSASSIGN, >>=)
(INT_CONSTANT, 1)
(SEMICOLON, ;)
(ID, test)
(PERIOD, .)
(ID, test_double)
(MULASSIGN, *=)
(FLOAT_CONSTANT, 2.5)
(SEMICOLON, ;)
(ID, test)
(PERIOD, .)
(ID, test_int)
(LSASSIGN, <<=)
(INT_CONSTANT, 3)
(SEMICOLON, ;)
(ID, printf)
(LPARENTHESE, ()
(STRING, "%s")
(COMMA, ,)
(STRING, "\"Test\"\n")
(RPARENTHESE, ))
(SEMICOLON, ;)
(ID, printf)
(LPARENTHESE, ()
(STRING, "char in test: %c, %ld byte\n")
(COMMA, ,)
(ID, test)
(PERIOD, .)
(ID, test_char)
(COMMA, ,)
(SIZEOF, sizeof)
(LPARENTHESE, ()
(ID, test)
(PERIOD, .)
(ID, test_char)
(RPARENTHESE, ))
(RPARENTHESE, ))
(SEMICOLON, ;)
(INT, int)
(ID, num)
(LBRACKET, [)
(INT_CONSTANT, 2)
(RBRACKET, ])
(DIRECTASSIGN, =)
(LBRACE, {)
(INT_CONSTANT, 10)
(COMMA, ,)
(INT_CONSTANT, 30)
(RBRACE, })
(SEMICOLON, ;)
(FOR, for)
(LPARENTHESE, ()
(AUTO, auto)
(ID, i)
(DIRECTASSIGN, =)
(INT_CONSTANT, 0)
(SEMICOLON, ;)
(ID, i)
(LANGLE, <)
(ID, num)
(LBRACKET, [)
(INT_CONSTANT, 1)
(RBRACKET, ])
(SEMICOLON, ;)
(INC, ++)
(ID, i)
(RPARENTHESE, ))
(LBRACE, {)
(DEC, --)
(ID, num)
(LBRACKET, [)
(INT_CONSTANT, 0)
(RBRACKET, ])
(SEMICOLON, ;)
(IF, if)
(LPARENTHESE, ()
(NOT, !)
(ID, num)
(LBRACKET, [)
(INT_CONSTANT, 0)
(RBRACKET, ])
(RPARENTHESE, ))
(BREAK, break)
(SEMICOLON, ;)
(RBRACE, })
(INT, int)
(ID, a)
(DIRECTASSIGN, =)
(ID, num)
(LBRACKET, [)
(INT_CONSTANT, 0)
(RBRACKET, ])
(PLUS, +)
(ID, num)
(LBRACKET, [)
(INT_CONSTANT, 1)
(RBRACKET, ])
(SEMICOLON, ;)
(ID, a)
(XORASSIGN, ^=)
(INT_CONSTANT, 0x12)
(SEMICOLON, ;)
(ID, a)
(BORASSIGN, |=)
(INT_CONSTANT, 0012)
(SEMICOLON, ;)
(ID, a)
(BANDASSIGN, &=)
(INT_CONSTANT, 0X2)
(SEMICOLON, ;)
(ID, a)
(MODASSIGN, %=)
(INT_CONSTANT, 010)
(SEMICOLON, ;)
(DOUBLE, double)
(ID, b)
(DIRECTASSIGN, =)
(FLOAT_CONSTANT, 010.0)
(SEMICOLON, ;)
(ID, b)
(DIRECTASSIGN, =)
(ID, b)
(MINUS, -)
(ID, a)
(SEMICOLON, ;)
(WHILE, while)
(LPARENTHESE, ()
(ID, a)
(DEC, --)
(RPARENTHESE, ))
(BREAK, continue)
(SEMICOLON, ;)
(CHAR, char)
(ID, c)
(DIRECTASSIGN, =)
(CHARACTER, u'\12')
(SEMICOLON, ;)
(SWITCH, switch)
(LPARENTHESE, ()
(ID, c)
(RPARENTHESE, ))
(LBRACE, {)
(CASE, case)
(CHARACTER, 'a')
(COLON, :)
(ID, printf)
(LPARENTHESE, ()
(STRING, "I'm""a\n")
(RPARENTHESE, ))
(SEMICOLON, ;)
(DEFAULT, default)
(COLON, :)
(BREAK, break)
(SEMICOLON, ;)
(RBRACE, })
(IF, if)
(LPARENTHESE, ()
(ID, a)
(EQ, ==)
(INT_CONSTANT, 2)
(RPARENTHESE, ))
(SEMICOLON, ;)
(ELSE, else)
(IF, if)
(LPARENTHESE, ()
(ID, a)
(GE, >=)
(INT_CONSTANT, 3)
(RPARENTHESE, ))
(SEMICOLON, ;)
(ELSE, else)
(IF, if)
(LPARENTHESE, ()
(ID, a)
(LE, <=)
(MINUS, -)
(INT_CONSTANT, 1)
(RPARENTHESE, ))
(SEMICOLON, ;)
(ELSE, else)
(IF, if)
(LPARENTHESE, ()
(ID, a)
(RANGLE, >)
(INT_CONSTANT, 1)
(RPARENTHESE, ))
(SEMICOLON, ;)
(ID, b)
(DIRECTASSIGN, =)
(ID, a)
(NE, !=)
(INT_CONSTANT, 5)
(QUESTION, ?)
(INT_CONSTANT, 0)
(COLON, :)
(INT_CONSTANT, 1)
(SEMICOLON, ;)
(ERRORCHAR, @)
(RBRACE, })
